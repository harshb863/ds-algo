# Python implementation of the approach 

# Node of a linked list 
class Node: 
	def __init__(self, next = None, data = None): 
		self.next = next
		self.data = data 

# Function to create a new node 
def newNode( d): 

	newnode = Node() 
	newnode.data = d 
	newnode.next = None
	return newnode 

def addHead(head,data):
    newnode1 = newNode(data)
    newnode1.next = head
    head = newnode1
    # print(head.data,head.next.data)
    return head
    # printLinkedList(head)
    
    

# Recursive function to reverse the consecutive 
# even nodes of the linked list 

def printLinkedList(head): 

	while (head != None): 
	
		print(head.data ,end= " ") 
		head = head.next
	
# Driver code 
arr = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11 ] 
n = len(arr) 

head = None
p = Node() 

i = 0

# Constructing linked list 
while ( i < n ): 
	
	if (head == None): 
		
		p = newNode(arr[i]) 
		head = p 
	else: 
		p.next = newNode(arr[i]) 
		p = p.next
	i = i + 1; 

# Printing the reversed linked list 
# printLinkedList(head) 

# This code is contributed by Arnab Kundu 
# print("a")
printLinkedList(addHead(head,16))
# addHead(head,16)